/*  
 * SwingComponentExample.java  
 *  
 * Version:  
 *     $Id$  
 *  
 * Revisions:  
 *     $Log$  
 */  
  
import javax.swing.*;  
import javax.swing.border.*;
import java.awt.event.*;  
import java.awt.*;  
  
/**  
 * The purpose of this program is to demonstrate the creation of various 
 * Swing components, their use in a user interface, and percise positioning
 * of the components on the UI. This program also demonstrates the user of 
 * the MouseListener and MouseMotionListener.
 * The User interface generated by this program uses BorderLayout, GridLayout
 * and FlowLayouts to place the components on the user Interface.
 *
 * Note: This program requires that the class TimerLabel resides in the same
 *       directory as this program. The program also requires the surfing.gif
 *       reside in the same directory as the program.
 *
 * Usage: java SwingComponentExample
 *
 * When the user interface is displayed, it is best to maximize the window 
 * so that all components will be displayed.
 *  
 * @author        Julie A. Adams 
 * @author        Paul Tymann (For the StopWatch code)
 */  
  
public class SwingContainerExample extends JFrame implements MouseListener, 
					      
							     MouseMotionListener{  

    private Container content;
    /**
     * A Panel to hold the StopWatch, Text Modification, Font Colors, and
     * ComboBox UIs so that they can be added to the UI as one element.
     **/
    private JPanel eastPanel; 

    /**
     * Attributes related to the stop watch user interface 
     **/
    private boolean stopped = true;      // True if the stopwatch is running  
    private TimerLabel theTime;  // Place to dosplay the time  
  
    private JButton reset;            // Reset button  
    private JButton start;           // Start button 
    private JButton stop;            // Stop button

    /**
     *Attributes related to using checkBox for changing font style. 
     **/
    private JTextField inputText; // a place to type text

    private JCheckBox redChkButton; // Red CheckBox
    private JCheckBox boldChkButton; // Bold CheckBox
    private JCheckBox italicChkButton; // italicCheckBox
    
    /**
     * Attributes related to using radioButtons to change font colors 
     **/
    private JPanel fontColorPanel;
    private JLabel fontColorLabel; // The text to be changed
    // Buttons to change the font color
    private JRadioButton blackButton, whiteButton, blueButton, 
	redButton, greenButton;
    private ButtonGroup radioButtonGroup;

    /**
     * Attributes related to the menus 
     **/
    
    private final String aboutText = "This is an example program for " +
	"some of the more common Swing components. \n Created by: Julie " +
	"A. Adams with code compiled from Deitel and Deitel and Paul Tymann.";
    private final Color colorValues[] = { Color.black, Color.blue, 
					  Color.white, Color.red, 
					  Color.green };
    private final String colors[] = {"Black", "Blue", "White", "Red", 
					 "Green"};
   
    private JRadioButtonMenuItem colorItems[];
    private ButtonGroup colorGroup;
    private JMenuBar bar;

    /**
     *Attributes related to the comboBox and displaying the select item in 
     * text format
     **/
    private JComboBox funComboBox;
    private JLabel funLabel;
    private String funItems[] = { "Get a life", "Have fun", "Summer!",
				  "Yo Yo Yo", "Hidi Ho", "Weekend"};
    
    /**
     * Attribtues related to Mouse events 
     **/
    private JPanel mousePanel;
    private JLabel iconLabel;
    private Icon funIcon = new ImageIcon( "surfing.gif" );

    /**
     * A series of inner Event Handler classes.
     **/

    /**
     * CheckBoxHandler Class
     * The purpose of the CheckBoxHandler class is to implement an ItemListener
     * for the checkBoxes. 
     **/
    private class CheckBoxHandler implements ItemListener {

	/**
	 * create two attributes that will permit the selection of multiple
	 * font styles.
	 **/
	private int valBold = Font.PLAIN;
	private int valItalic = Font.PLAIN;

	// Create an attribute to hold the current font Color.
	private Color textColor = Color.black;
	    
	public void itemStateChanged( ItemEvent event ){
	    /**
	     * First, determine which checkBox activated the event.
	     * Second, determine if the checkBox was Selected or deselected.
	     * Third, set the font style or color attribute based upon
	     * the event.
	     **/
	    if (event.getSource() == boldChkButton ){
		if (event.getStateChange() == ItemEvent.SELECTED ) {
		    valBold = Font.BOLD;
		} else {
		    valBold = Font.PLAIN;
		}
	    } else if (event.getSource() == italicChkButton ) {
		if (event.getStateChange() == ItemEvent.SELECTED ) {
		    valItalic = Font.ITALIC;
		} else {
		    valItalic = Font.PLAIN;
		}
	    } else if (event.getSource() == redChkButton ) {
		if (event.getStateChange() == ItemEvent.SELECTED ) {
		    textColor = Color.red;
		} else {
		    textColor = Color.black;
		}
	    }
	    
	    /**
	     * Set the text in the textField to the appropraite font and color
	     * based upon the user's selections.
	     **/
	    inputText.setFont( new Font( "Serif", valBold + valItalic, 14 ) );
	    inputText.setForeground( textColor );
	} // end of itemStateChanged

    } // end of CheckBoxHandler Class
    
    /**
     * RadioButtonHandler Class
     * The purpose of the RadioButtonHandler class is to implement an 
     * ItemListener for the RadioButtons. 
     **/
    private class RadioButtonHandler implements ItemListener {

	public void itemStateChanged( ItemEvent event ){
	    /**
	     * First, determine which radio button was selected.
	     * Second, Change the color of the Label text to the 
	     * associated text color.
	     **/
	    if (event.getSource() == blackButton ){
		fontColorLabel.setForeground( Color.black );
	    } else if (event.getSource() == whiteButton ) {
		fontColorLabel.setForeground( Color.white );
	    } else if (event.getSource() == redButton ) {
		fontColorLabel.setForeground( Color.red );
	    } else if (event.getSource() == blueButton ) {
		fontColorLabel.setForeground( Color.blue );
	    } else if (event.getSource() == greenButton ) { 
		fontColorLabel.setForeground( Color.green );
	    } else {
		fontColorLabel.setForeground( Color.black );
	    }
	} // end of itemStateChanged

    } // end of RadioButtonHandler Class
    
    /**
     * ColorMenuHandler Class
     * The purpose of the ColorMenuHandler class is to implement an 
     * ActionListener that will set the JFrame background color based
     * upon the select color from the menu.
     **/
    private class ColorMenuHandler implements ActionListener {
	
	public void actionPerformed( ActionEvent event ) {  
	
	    /**
	     * Loop through the menu items until we determing which
	     * menu item was selected.
	     * Then change the JFrame background color.
	     * Finally, set i to the length of the array so that we 
	     * will shortcut the loop.
	     **/
	    for ( int i = 0; i < colorItems.length; i++ ) {
		
		if ( colorItems[i].isSelected() ) {
		    /**
		     * Set the color of a particular panel. Setting the 
		     * color of content (the JFrame) will not result in the 
		     * color being visible. That is because there are
		     * various panels that are placed on top of the frame.
		     **/
		    mousePanel.setBackground( colorValues[i] );
		    i = colorItems.length;
		}
	    }
	    repaint(); 
	}
      
    }  // end ColorMenuHandler
  

    
    /**  
     * Create a new stop watch and display the resulting GUI.  
     *  
     * @param title title displayed in the title bar  
     */  
      
    public SwingContainerExample( String title ) { 
	
	/**
	 * Create an instance of the JFrame Class.
	 * In order to implement the MouseListener and MouseMotionListener
	 * interfaces, the SwingComponentExample must inherit from JFrame.
	 **/
	super( title );  
  
	// Frames do not handle close by default ...  
	this.addWindowListener(  
	    new WindowAdapter() {  
		public void windowClosing( WindowEvent event ) {  
		    System.exit( 0 );  
                }  
            }  
        );  

	// Create a variable that will allow use to manipulate the components
	// on the user interface.
	content = this.getContentPane();  
	
	// Use a BorderLayout for the topLevel Layer
	content.setLayout( new BorderLayout() ); 

	// Create a Panel for all components not related to the mouse.
	// Use a BorderLayout
	eastPanel = new JPanel( new BorderLayout() );
	
	/**
	 * Create a filler to put in the north portion of the 
	 * BorderLayout to achieve the look we want. Otherwise the Center
	 * Panel will expand to fill in the space which does not look good.
	 *
	 */
	JLabel filler = new JLabel( );
	
	eastPanel.add( "North", filler );
	
	// Create the rest of the stop watch UI
	createStopWatchUI();

	// Create the text modifcation UI
	createTextModUI();

	
	// Create a couple of menus.
	createMenus();
	
	// Create a ComboBox
	createComboBox();
	
	// NOTE: Had to move this code to create the proper layout.
	// Create a label indicating the radio button section of the UI
	// Must be done in the constructor since the label is a final.
	/**
	 * Create a panel that will look better on the bottom section rather
	 * than permitting the UI component to streatch arcoss the bottom 
	 * of the Border layout.
	 **/
	JPanel bottomPanel = new JPanel( new FlowLayout() );
	JLabel filler4 = new JLabel( );
	
	bottomPanel.add( filler4 );
	
	// Create a RadioButton UI
	createRadioButtonUI();
	// Add the RadioButton UI to the bottomPanel.
        bottomPanel.add( fontColorPanel );
	
	JLabel filler5 = new JLabel( );
	bottomPanel.add( filler5 );
	eastPanel.add( "South", bottomPanel );

	// Create the mouse movement section of the UI
	addMouseListener( this );
	addMouseMotionListener( this );
	// Create a panel for the mouse UI items with a FlowLayout
	mousePanel = new JPanel( new BorderLayout() );
	// Create a the icon to move with the mouse
	iconLabel = new JLabel( funIcon);
	mousePanel.add( "South", iconLabel );
	mousePanel.setBorder( new TitledBorder( "Mouse Activites UI" ) );

	// Add the two primary panels to the JFrame.
	content.add( "West", mousePanel );
	content.add( "East", eastPanel );


	/**
	 * While the window is packed, it is best to resize the window using 
	 * the maximize button or you may not see all the components.
	 **/
	this.pack();  
	this.show();  
    }  
  
    /**
     * The purpose of this method is to create a section of the User Interface
     * that will hold a stop watch. 
     * The stop watch section includes a title for the section, a timer label
     * that will display the time, and three buttons (Start, Stop, and Reset).
     * The method adds the components to the frame. The start button 
     * allows the user to start the timer. The Stop button allows the 
     * user to stop the timer. When the user stops the timer, the Reset 
     * button becomes enabled and the user may reset the timer to 00:00:00.
     * The Reset button becomes disabled when the user selects the Start 
     * button.
     **/
    public void createStopWatchUI() {

	// Create the label to display the time  
	theTime = new TimerLabel();  
	theTime.setFont( new Font( "Courier", Font.BOLD, 25 ) );  
  
	// Create the buttons and put them in a panel  
	JPanel buttonPanel = new JPanel();  
  
	// Create a reset button
	reset = new JButton( "Reset" );  
	/**
	 * Create an anonymous ActionListener class for the Reset button.
	 * When the user presses the Reset button, the resetTheTimer method
	 * is called only if the timer is stopped.
	 **/
	reset.addActionListener( 
              new ActionListener () {
		      public void actionPerformed( ActionEvent event) 
		      {
			 if (stopped) {
			     resetTheTimer();  
			     }
		      } // end of actionPerformed method
		  } // end of anonymous class
	      ); // end addActionListener

	/**
	 * Disable the Reset button until stopwatch is started once.
	 * After the first start, disable the reset button while the 
	 * timer is running.
	 */
	reset.setEnabled( false ); 
  
	// Create the Start button
	start = new JButton( "Start" );
	/**
	 * Create an anonymous ActionListener class for the Start button.
	 * When the user presses the Start button, the startTheTimer method
	 * is called and the Reset button is disabled, only if the timer
	 * is stopped.
	 **/
	start.addActionListener( 
              new ActionListener () {
		      public void actionPerformed( ActionEvent event) 
		      {
			 if (stopped) {
			     startTheTimer();  
			     reset.setEnabled( false );
			     }
		      } // end of actionPerformed method
		  } // end of anonymous class 
	      );   // End of addActionListener

	// Create the Stop button
	stop = new JButton( "Stop" );
	/**
	 * Create an anonymous ActionListener class for the Stop button.
	 * When the user presses the Stop button, the stopTheTimer method
	 * is called and the Reset button is enabled.
	 **/
	stop.addActionListener( 
              new ActionListener () {
		      public void actionPerformed( ActionEvent event) 
		      {
			stopTheTimer();  
			reset.setEnabled( true );
		      } // end of actionPerformed method
		  } // end of anonymous class
	      ); //end addActionListner
  
	// Add the buttons to the panel
	buttonPanel.add( start ); 
	buttonPanel.add( stop );
	buttonPanel.add( reset );  
	
	// Create a panel for the StopWatch UI using a BoarderLayout.  
	JPanel stopWatchPanel = new JPanel( new BorderLayout() );
	
	// Add the StopWatch components to the UI Panel
	stopWatchPanel.add( "North", theTime );
	stopWatchPanel.add( "South", buttonPanel ); 

	stopWatchPanel.setBorder( new TitledBorder( "StopWatch UI" ) );

	// Add the StopWatch UI Panel to a primary panel.
	eastPanel.add( "West", stopWatchPanel );
  
    }

    /**
     * The purpose of this method is to create a section of the User Interface
     * that will change the color and style of the text typed into a textBox. 
     * The createTextMod section includes a title for the section, a textBox
     * that will contain text typed by the user, and three checkBoxes (red, 
     * bold, and italic).
     * The method adds the components to the frame. 
     * The checkBoxes allow the user to change the font style and color of the
     * text typed into the textField. All three may be chosen at the same
     * time, that is the purpose of checkBoxes.
     **/
    public void createTextModUI() {
	
	// set up the text Field
	inputText = new JTextField( 25 );
	/* NOTE: The textfield is not tied to an action listener
	* so nothing will happen with the text when I hit the return key.
	*/

	// Create the checkBoxes and add to the UI
	redChkButton = new JCheckBox( "Red", false);
	
	boldChkButton = new JCheckBox( "Bold", false);
	
	italicChkButton = new JCheckBox( "Italic", false);
	
	// register the checkBox events
	CheckBoxHandler checkHandler = new CheckBoxHandler();
	redChkButton.addItemListener( checkHandler );
	boldChkButton.addItemListener( checkHandler );
	italicChkButton.addItemListener( checkHandler );
	
	// Initalize the text box to create plain, black text.
	inputText.setForeground( Color.black );
	inputText.setFont( new Font( "Serif", Font.PLAIN, 14 ));

	// Create a Border Layout panel for the Text Modification UI.
	JPanel textModPanel = new JPanel( new BorderLayout() );
	textModPanel.add( "South", inputText );

	// Create a sub panel using the FlowLayout to store the check boxes.
	JPanel buttonPanel = new JPanel( new FlowLayout() );
	buttonPanel.add( redChkButton );
	buttonPanel.add( boldChkButton );
	buttonPanel.add( italicChkButton );
	
	textModPanel.add( "North", buttonPanel );
	textModPanel.setBorder( new TitledBorder( "Text Modification UI" ) );
	
	// Add the Text Midification UI Panel to the primary Panel.
	eastPanel.add( "Center", textModPanel );
    } // end of CreateTextModUI
	
    /**
     * The purpose of this method is to create a section of the User Interface
     * that will change the text color of the label associated with this
     * section by selecting from various radio buttons.
     * The createRadioButtonUI section includes a title for the section, a 
     * JLabel, and a set of radio Buttons that allow the user to select
     * a color for the JLabel text.
     **/
    public void createRadioButtonUI () {
	
	// set up the Label
	fontColorLabel = new JLabel( "Yipe Colors!" );
	
	// Create the radio buttons
	blackButton = new JRadioButton( "Black", true);
	whiteButton = new JRadioButton( "White", false);
	redButton = new JRadioButton( "Red", false);
	blueButton = new JRadioButton( "Blue", false);
	greenButton = new JRadioButton( "Green", false);
	
	// register the radio button events
	RadioButtonHandler radioHandler = new RadioButtonHandler();
	blackButton.addItemListener( radioHandler );
	whiteButton.addItemListener( radioHandler );
	redButton.addItemListener( radioHandler );
	blueButton.addItemListener( radioHandler );
	greenButton.addItemListener( radioHandler );

	// create the logical relationship between the radio buttons
	radioButtonGroup = new ButtonGroup();
	radioButtonGroup.add(blackButton);
	radioButtonGroup.add(whiteButton);
	radioButtonGroup.add(redButton);
	radioButtonGroup.add(blueButton);
	radioButtonGroup.add(greenButton);

	// Create a panel for the Text color UI using a Border Layout.
	fontColorPanel = new JPanel( new BorderLayout() );
	
	// Create a subpanel to properly place the information on the UI.
	JPanel dataPanel = new JPanel( new GridLayout( 1, 2 ) );
	
	dataPanel.add( fontColorLabel ); 
	
	// Create a panel using the Grid Layout that will allow the 
	// radio Buttons to be position properly on the UI.
	JPanel buttonPanel = new JPanel( new GridLayout( 3, 2 ) );
	buttonPanel.add( blackButton );
	buttonPanel.add( redButton );
	
	buttonPanel.add( whiteButton );
	buttonPanel.add( blueButton );
	// Dummy labels that will permit use to attian the proper positioning
	// of the components on the UI.
	JLabel filler = new JLabel( );
	buttonPanel.add( filler );
	buttonPanel.add( greenButton );
	
	dataPanel.add( buttonPanel );
	// Dummy labels that will permit use to attian the proper positioning
	// of the components on the UI.
	JLabel filler1 = new JLabel( );
	JLabel filler2 = new JLabel( );
	fontColorPanel.add( "West", filler1 );
	fontColorPanel.add( "Center", dataPanel );
	fontColorPanel.add( "East", filler2 );
	fontColorPanel.setBorder( new TitledBorder( "Text Color UI" ) );
	
    } // end of createRadioButtonUI method

    /**
     * The purpose of this method is to a series of menus for the UI.
     * A File menu is created that allows the user to display an About
     * box and exit the program.
     * The Stuff menu allows the user to select a JFrame background color
     * based upon their selection from the color submenu. The Stuff menu also
     * includes a separator and an option that does nothing.
     **/
    public void createMenus() {
	// Create File menu
	JMenu fileMenu = new JMenu( "File" );
	// Create a shortcut key
	fileMenu.setMnemonic( 'F' );

	// Create the about Box item for the File menu.
	JMenuItem aboutItem = new JMenuItem( "About ..." );
	aboutItem.setMnemonic( 'A' );

	/**
	 * Create an action listener that will display an about dialog
	 * box to the user when the option is selected.
	 **/
	aboutItem.addActionListener (
		 new ActionListener () {
			 public void actionPerformed (ActionEvent event){
			     JOptionPane.showMessageDialog( content, 
						  aboutText, "About", 
						  JOptionPane.PLAIN_MESSAGE);
			 }
		     } // end anonymous class
		 ); // end addActionListener

	// Create the exit item
	JMenuItem exitItem = new JMenuItem( "Exit" );
	exitItem.setMnemonic( 'x' );
	
	exitItem.addActionListener (
		  new ActionListener () {
			  public void actionPerformed( ActionEvent event ) {
			      System.exit( 0 );
			  }
		      } // end anonymous class
		  );// End addActionListener

	// Add the menu items to the menu
	fileMenu.add( aboutItem );
	fileMenu.add( exitItem );
	
	// Create the second menu.
	JMenu stuffMenu = new JMenu( "Stuff" );
	stuffMenu.setMnemonic( 'S' );
	
	// Create a submenu to hold background colors.
	JMenu colorMenu = new JMenu( "Color" );
	colorMenu.setMnemonic( 'C');
       
	// Create the color radio buttons and relate them to the appropriate 
	// handler.
	ColorMenuHandler colorHandler = new ColorMenuHandler();
	colorItems = new JRadioButtonMenuItem[ colorValues.length ];
	colorGroup = new ButtonGroup();

	for ( int i = 0; i < colorValues.length; i++ ){
	    colorItems[i] = new JRadioButtonMenuItem( colors[i] );
	    colorItems[i].addActionListener ( colorHandler );
	    colorMenu.add( colorItems[i] );
	    colorGroup.add( colorItems[i] );
	}
	
	
	// just create a menu item that does nothing so that we 
	// can demonstrate the use of the menu separator.
	JMenuItem doNothingItem = new JMenuItem( "doNothing" );
	
	// Add the submenu and menu item to the Stuff Menu.
	stuffMenu.add( colorMenu );
	stuffMenu.addSeparator();
	stuffMenu.add( doNothingItem );

	// Create a menu bar
	bar = new JMenuBar();

	// Add the primary menus to the menu bar
	bar.add( fileMenu );
	bar.add( stuffMenu );
	
	/* Add the menu bar to the frame. If you do not add it, the 
	 * menu bar will not be displayed.
	 */
	this.setJMenuBar( bar );
    } // end CreateMenu

    /**
     * The purpose of this method is to create a section of the User Interface
     * that allows the user to make selections from a ComboBox and display 
     * the section in the associate label.
     * The createComboBox section includes a title for the section, a 
     * JComboBox, and a JLabel.
     **/
    public void createComboBox() {
	
	// Create a Combo box to hold six items
	funComboBox = new JComboBox( funItems );
	funComboBox.setMaximumRowCount( 6 );
	// Add an itemListener that will update the text of the Label to
	// the item selected from the ComoboBox.
	funComboBox.addItemListener (
	   new ItemListener() {
		   public void itemStateChanged( ItemEvent event ) {
		       if ( event.getStateChange() == ItemEvent.SELECTED ){
			   funLabel.setText( funItems[ funComboBox.getSelectedIndex() ] );
		       }
		   }
	       }
	   ); // end addItemListener

	// Initalize the Label
	funLabel = new JLabel( "Yo Yo Yo" );
	
	// Create a panel using the Grid Layout to hold the Combo UI 
	// components. 
	JPanel funComboPanel = new JPanel( new GridLayout( 1, 2) );
	funComboPanel.add( funComboBox );
	funComboPanel.add(  funLabel );
	funComboPanel.setBorder( new TitledBorder( "Fun Combo UI" ) );

	eastPanel.add( "East", funComboPanel );
	
	
    } // End CreateComboBox
    
    /**  
     * Start the watch running.  Set the labels on the buttons to  
     * stop.  
     */  
      
    private void startTheTimer() {  
	
	stopped=false;  
	theTime.timerStart();  
    }  
  
    /**  
     * Reset the timer.  Set the labels on the buttons to start  
     * and reset.  
     */  
      
    private void resetTheTimer() {  
	
	stopped=true;  
	theTime.timerReset();  
    }  
  
    /**  
     * Stop the timer.  Set the labels on the buttons to start  
     * and reset.  
     */  
      
    private void stopTheTimer() {  
	theTime.timerStop();  
	theTime.updateText();  
	  
	stopped=true;  
    }  

    /**
     * This mouseDragged method required by the MouseMotionListener.
     * When the user holds down any mouse button while moving the mouse, 
     * the icon will move with the mouse.
     */
    public void mouseDragged ( MouseEvent event ) {
	iconLabel.setLocation( event.getX(), event.getY() );
    }

    /**
     * This mouseClicked method required by the MouseListener.
     * When the user clicks the mouse, the icon will move to the clicked
     * location.
     */
    public void mouseClicked ( MouseEvent event ) {
	iconLabel.setLocation( event.getX(), event.getY() );
    }
    /**
     * Java requires that the follow additional method be included in any 
     * program that implements the MouseMotionListener. We will not use it,
     * and therefore leave it empty. When this event occurs, the program
     * will do nothing.
     **/
    public void mouseMoved ( MouseEvent event ) {
    } 

    /**
     * Java requires that the following additional methods be included in any 
     * program that implements a MouseListener. We have two options. 
     * One include the empty methods. In which case, nothing will happen on
     * these events.
     * Two, create a specific mouseHandler class that extends the MouseAdapter
     * class. 
     * I have chosen the easy way. 
     **/
    public void mousePressed ( MouseEvent event ) {
    }
    public void mouseReleased ( MouseEvent event ) {
    }
    public void mouseEntered ( MouseEvent event ) {
    }
    public void mouseExited ( MouseEvent event ) { 
    } 
    
    /**  
     * Create a stopwatch and let it run!!  
     *  
     * @param args[] command line arguments (ignored).  
     */  
      
    public static void main( String args[] ) {  
	SwingContainerExample gui = new SwingContainerExample( "Demo" );  
    }  
  
} // StopWatchGui  
