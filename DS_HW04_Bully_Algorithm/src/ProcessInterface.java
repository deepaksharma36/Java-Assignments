//import files are places here.
import java.io.File;
import java.rmi.Remote;
import java.rmi.RemoteException;

/**
 * This is a remote interface for illustrating RMI peer.
 * 
 * @author Sharma, Deepak DS5930
 * 
 */
public interface ProcessInterface extends Remote {
	 
	/*public static final String[] SERVERS = { "glados.cs.rit.edu", "glados.cs.rit.edu", "glados.cs.rit.edu", "glados.cs.rit.edu",
		"glados.cs.rit.edu", "glados.cs.rit.edu", "glados.cs.rit.edu", "glados.cs.rit.edu", "glados.cs.rit.edu",
		"glados.cs.rit.edu", "glados.cs.rit.edu", "glados.cs.rit.edu" };*/
	
public static final String[] PROCESS = { "glados.cs.rit.edu", "kansas.cs.rit.edu",  "gorgon.cs.rit.edu",
			"newyork.cs.rit.edu", "yes.cs.rit.edu", "kinks.cs.rit.edu", "medusa.cs.rit.edu", "joplin.cs.rit.edu",
			"delaware.cs.rit.edu", "buddy.cs.rit.edu", "arizona.cs.rit.edu" ,"doors.cs.rit.edu"};
	
	/**
	 * Remote process will send a election message including an election ID generated by organizer of election
	 * 
	 * @param requister
	 * @throws RemoteException
	 */
	public void electionMessage(ElectionMessage requister) throws RemoteException;
	/**
	 * Process will respond to remote process using this method
	 * @param responserID as each server wait for response of it election message, In case of multiple election 
	 * this ID resolve conflicts 
	 * @throws RemoteException
	 */
	public void electionResponse(ElectionMessage responserID) throws RemoteException;
	/**
	 * A coordination message will be received from a process which had decided to be leader 
	 * @param leader
	 * @throws RemoteException
	 */
	public void coordinatorMessage(ElectionMessage leader ) throws RemoteException;
	/**
	 * Check heart Beat of the Leader
	 * @return evidence of being alive
	 * @throws RemoteException in case crash remote exception will be raised on remote process 
	 */
	public boolean heartBeatChecker() throws RemoteException;
	
	
	
}
