import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Random;


public class TestCaseGenerator {
private final String[] DNA ={"A","C","G","T"};
private final String[] Binary={"0","1"};
private final String[] alphabets={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
private final String[] numeric={"0","1","2","3","4","5","6","7","8","9"};
HashMap<String,ArrayList<String>> types;
public TestCaseGenerator()
{types = new HashMap<String, ArrayList<String>>();
initHashMap();	
}
private void initHashMap()
{
	this.types.put("DNA",  new ArrayList<String>(Arrays.asList(DNA)));
	this.types.put("Binary",  new ArrayList<String>(Arrays.asList(Binary)));
	this.types.put("alphabets",  new ArrayList<String>(Arrays.asList(alphabets)));
	this.types.put("numeric",  new ArrayList<String>(Arrays.asList(numeric)));

}
/**
 * This method create test cases consist of strings from 0 - length size
 * each test case will have two string S1 and S2 of same length
 * number of test cases will be equal to length 
 * @param length 
 * @param requiredType types will provided by user Like DNA Alphabets etc 
 * multiple types can be given, then test cases will have mix of charcter from
 * @param fileName
 * @return
 * @throws IOException
 */
public  File TestCasesGenerator(int length ,ArrayList<String> requiredType,String fileName) throws IOException
{
	int sampleCounter=1;
    File testCases = new File(fileName);
	if (!testCases.exists()) {
		testCases.createNewFile();
	}

    FileOutputStream fileWriter = new FileOutputStream(testCases);
    //Container is mix bag, according to need of the test case
    // all type of the required charactors will be inserted into the same
    ArrayList<String> container=createContainer(requiredType);
    while(sampleCounter<=length){
    	
	byte[] sequance1 = stringGenerator(sampleCounter,container);
	byte[] sequance2 = stringGenerator(sampleCounter,container);
	fileWriter.write(sequance1);
	fileWriter.write("\t".getBytes());
	fileWriter.write(sequance2);
	fileWriter.write("\n".getBytes());
	fileWriter.flush();
	sampleCounter++;
    }
	fileWriter.close();

	return testCases;
}

private byte[] stringGenerator(int length , ArrayList<String> container)
   {
	StringBuilder sampleString = new StringBuilder();
	Random indexGenerator= new Random();
	while (length>0)
	{
		sampleString.append(container.get(indexGenerator.nextInt(container.size())));
		length--;
	}
	return sampleString.toString().getBytes();
	
   }
private  ArrayList<String> createContainer(ArrayList<String> type)
{ArrayList<String> container = new ArrayList<String>();
for(String types: type )
	container.addAll(this.types.get(types));
return container;	
	}
}
