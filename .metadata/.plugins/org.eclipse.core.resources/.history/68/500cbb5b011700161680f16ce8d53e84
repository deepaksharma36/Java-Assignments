import java.util.HashMap;




public class RecursiveMemoizationTable implements Algo {
	int numberOfRecursiveCall=0;
	StringBuilder commSequance = new StringBuilder();

	int[][] table ;
	//commSequance=new StringBuilder();
	public Result execute(String stringA, String stringB) {
		
		numberOfRecursiveCall=0;
		table = new int[stringA.length()][stringB.length()];
		long sTime = System.currentTimeMillis();
		int l1 = stringA.length();
		int l2 = stringB.length();

		
		for (int i=0;i<stringA.length();i++)
		{
			for(int j=0;j<stringB.length();j++)
				table[i][j]=-1;
		}
		long stTime = System.currentTimeMillis();
		RecursiveMemoization(stringA, stringB,l1,l2);
		Result memoResult = solution(table,stringA,stringB);
	    long timeTaken = stTime - sTime;
	    return memoResult;
	}
	public Result solution(int[][] table, String A, String B){
		//showTable(table);
		int counter1=A.length();
		int counter2=B.length();
		int LCSlenght=table[counter1][counter2];
		while(counter1>0 && counter2>0){
		if(A.charAt(counter1-1)==B.charAt(counter2-1)){
			commSequance.append(A.charAt(counter1-1));
			counter1--;
			counter2--;
		}
		else if(table[counter1-1][counter2]>table[counter1][counter2-1])
			   counter1--;
		else
			 counter2--;
		}
		return new Result(LCSlenght, commSequance.toString(),0 , 0, A.length(), B.length());
	}
	
	public int RecursiveMemoization(String A, String B, int i, int j){

	
		if (i<-1 || j<-1)
			return 0;
		else if (table[i][j]==-1){
		numberOfRecursiveCall++;
		if(A.charAt(i)==B.charAt(j)){
				table[i][j] = 1+ RecursiveMemoization(A,B,i-1,j-1);
				return table[i][j];
			}
		
			
		else{
			int temp1 =RecursiveMemoization(A,B,i-1,j);
			int temp2 = RecursiveMemoization(A,B,i,j-1);
					table[i][j]= temp1>temp2 ? temp1:temp2;
					return table[i][j];
				} 
		}
		else
		return table[i][j];
	}

	public static void main(String[] args)
	{
		RecursiveMemoizationTable hsb = new RecursiveMemoizationTable();
		hsb.execute("1101", "10").getComSubSeq();
		//System.out.println(hsb.solution(hsb.table,"1101","10"));
		//System.out.println("Final");
	}

	
}