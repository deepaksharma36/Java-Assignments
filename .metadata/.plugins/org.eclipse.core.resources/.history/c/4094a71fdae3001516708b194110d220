//import files are places here.
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;

/**
 * this Server class interacts with various client who request for file.
 * @author Sharma, Deepak DS5930
 *  */

public class Server extends UnicastRemoteObject implements ServerInterface {
	public  final int RMIport;
	public final String EntryServer;
	public final int NUMBEROFIDSPCES;
	HashMap<Integer,String> serverMap = new HashMap<Integer,String>();
	HashSet<String> files = new HashSet<String>();
	private String predecessor=null;
	public String getPredecessor() throws RemoteException {
		return predecessor;
	}
	public String getSuccessor() throws RemoteException {
		return successor;
	}
	private String successor=null;
	private int[] range=new int[2];
	String myAddress;
	String addRequest="";
	String error=null;
	String myPath="/home/stu13/s17/ds5930/";
	protected Server(int RMIport, String EntryServer , String path,int numberOfIdSpaces) throws RemoteException {
		super();
		this.RMIport=RMIport;
		this.NUMBEROFIDSPCES=numberOfIdSpaces;
		this.EntryServer=EntryServer;
		try {
			//this.RMIport=RMIport;
			this.myAddress=InetAddress.getLocalHost().getHostAddress();
			//this.myPath=myPath+this.myAddress+'/';
			this.myPath=path+'/';
			
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
	
	}
	private int ServerHashCode(String aString)
	{
		return Math.abs(aString.hashCode()%NUMBEROFIDSPCES);
	}
	private int FileHashCode(String aString)
	{
		return Math.abs(aString.hashCode()%NUMBEROFIDSPCES);
	}
	public int[] getRange() throws RemoteException {
		return range;
	}
	public void setRange(int[] range) throws RemoteException {
		this.range = range;
	}
	public void setPredecessor(String predecessor) throws RemoteException {
		this.predecessor = predecessor;
	}
	public void setSuccessor(String successor) throws RemoteException{
		this.successor = successor;
	}
	private void updateMyIdSpace(int hashCode){
		range[0]=hashCode+1;
	}
	private void contactMyOldPredecessorForSuccessorUpdate(String hostName) throws RemoteException{
		if (this.predecessor!=null)
		{
		ServerInterface predecessor =ServerContact(this.predecessor);
		predecessor.setSuccessor(hostName);
		}
		
	};
	public void updateNewNode(String predecessor, String successor,int minRange,int maxRange ) throws RemoteException
	{
	 this.predecessor=predecessor;
	 int[] range = {minRange,maxRange};
	 this.setRange(range);
	 this.successor=successor;
	}
	public synchronized void addNode(String hostName) throws RemoteException {
		try {
			int hashCode = ServerHashCode(hostName);
			System.out.println
			("Trying to Add server "+InetAddress.getByName(hostName).getHostName()+" With hash Code "+hashCode);
			System.out.println(ipToHost(myAddress)+" server takes care of (Before Adding) "+range[0]+" to "+range[1]);
		
		if (hashCode>=range[0] && hashCode<=range[1])
				{
				ServerContact(hostName).updateAddRequestString(ipToHost(myAddress));
				System.out.println(InetAddress.getLocalHost().getHostName()+ " is adding " +InetAddress.getByName(hostName).getHostName());
				if (myAddress.equals(successor) && myAddress.equals(predecessor)){
					setSuccessor(hostName);
					setPredecessor(hostName);
					ServerContact(hostName).updateNewNode(myAddress,myAddress,range[0],hashCode);
					updateMyIdSpace(hashCode);
				}
				else{
				ServerContact(hostName).updateNewNode(predecessor,myAddress,range[0],hashCode);
				
				contactMyOldPredecessorForSuccessorUpdate(hostName);
				updateMyIdSpace(hashCode);
				setPredecessor(hostName);}
			System.out.println("Successfully added");}
		else if(Math.min(Math.abs(hashCode-range[0]),NUMBEROFIDSPCES-Math.abs(hashCode-range[0]))<
		Math.min(Math.abs(hashCode-range[1]),NUMBEROFIDSPCES-Math.abs(hashCode-range[1]))){
				ServerContact(predecessor).addNode(hostName);
		}
		else
			ServerContact(successor).addNode(hostName);
		} catch (UnknownHostException e) {
			//if server does not exist
			e.printStackTrace();
		}
				
	}
 	public synchronized void leave() throws RemoteException{
 		if(predecessor!=null && successor!=null && range!=null){
 		System.out.println(myAddress+" is ready for removing, Detals before removing:");
 		view();
		int[] predRange  ={range[0],ServerContact(successor).getRange()[1]};
		ServerInterface successorObj=ServerContact(successor);
		ServerInterface predecessorObj=ServerContact(predecessor);
		successorObj.setRange(predRange);
		moveAllFile(successor);
		predecessorObj.setSuccessor(successor);
		successorObj.setPredecessor(predecessor);
		this.setPredecessor(null);
		this.setSuccessor(null);
		this.range=null;
		/////////////////////////////////////////////////////////////////////////////////////////////////
		System.out.println("Results for testing:");
		System.out.println(ipToHost(myAddress)+" has been successfully removed");
		System.out.println("prdecessor Details:");
		System.out.println(predecessorObj.getRange()[0]+" to "+predecessorObj.getRange()[1]);
		System.out.println("Pre: "+ipToHost(predecessorObj.getPredecessor())+" Succ"+ ipToHost(predecessorObj.getSuccessor()));
		System.out.println("successor Details:");
		
		System.out.println(successorObj.getRange()[0]+" to "+successorObj.getRange()[1]);
		System.out.println("Pre: "+ipToHost(successorObj.getPredecessor())+" Succ"+ ipToHost(successorObj.getSuccessor()));
		}
 		else{
 		System.out.println(myAddress+" is not a part of chord");
 		}
 		
	} 
 	private String ipToHost(String Ip){
 		try {
			return InetAddress.getByName(Ip).getCanonicalHostName();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
 	}
	public void moveAllFile(String predecessor) throws RemoteException
	{
		//File folder = new File("/Users/you/folder/");
		//File[] listOfFiles = folder.listFiles();

		for (String file : files) {
		 transmitFile(file, ServerContact(predecessor));
}


	}
	public void insert(String keyWord)  
	{
		int idSpace=FileHashCode(keyWord);
		ServerInterface destinationServer;
		try {
			destinationServer = ServerContact(EntryServer).findDestinationServer(idSpace);
			transmitFile(keyWord,destinationServer);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
	}
	public ServerInterface findDestinationServer(int idSpace) throws RemoteException{
		if (idSpace>=range[0] && idSpace <range[1])
			return this;
		else if(Math.min(Math.abs(idSpace-range[0]),NUMBEROFIDSPCES-1-Math.abs(idSpace-range[0]))<
				Math.min(Math.abs(idSpace-range[1]),NUMBEROFIDSPCES-1-Math.abs(idSpace-range[1]))){
			return ServerContact(predecessor).findDestinationServer(idSpace) ;}
			else
				return ServerContact(successor).findDestinationServer(idSpace) ;
	
	}
	public void search(String keyword){
		int idSpace=FileHashCode(keyword);
		try {
			ServerInterface	destinationServer=ServerContact(EntryServer).findDestinationServer(idSpace);
			destinationServer.sendFile(keyword, this);
			
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}
	public  void Error(String error) throws RemoteException{
		this.error=error;
	}
	public void sendFile(String name , ServerInterface destination) throws RemoteException
	{
		if (new File(myPath+name).exists())
				transmitFile(name, destination);
		else
			destination.Error("File Not Found");
			
	}
	
	public void updateAddRequestString(String hostName) throws RemoteException{
		addRequest=addRequest+"->"+hostName;
	}
	
	public void view()
	{
		try {
			if(predecessor!=null && successor!=null && range!=null){
			System.out.println(this.predecessor +" "  + InetAddress.getByName(predecessor).getCanonicalHostName());
			System.out.println(this.successor +" "+InetAddress.getByName(successor).getCanonicalHostName());
			System.out.println(myAddress+" Is taking care of Id Space: "+range[0]+" -to- "+range[1]);
		for(String file:files)
		{
			System.out.println(file);
		}}
			else{
				System.out.println("This server is not a part of Chord anymore");
			}
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
	}
	public void add(){
		try {
			ServerContact(EntryServer).addNode(myAddress);
			System.out.println(addRequest);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Remote Method for copying file on Server, this method will be called by other servers (parent) 
	 * for replicating  file.
	 */
	public synchronized void insertFile(String name, byte[] data)
			throws RemoteException {
			Path Currentpath = Paths.get(myPath+name);
			try {
				Files.write(Currentpath, data);
				files.add(name);
				System.out.println("Received "+name+" File");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Helper Method (replication process) for reading local file and sending to the Server 
	 * @param name File name
	 * @param destination Remote object of the Child Server
	 * @param requestCode 
	 */
	private void transmitFile(String name,ServerInterface destination ){
		Path path = Paths.get(myPath+name);
		 
	      try {
	    	  if (new File(myPath+name).exists()){  
			byte[] data = Files.readAllBytes(path);
			destination.insertFile(name, data);}
		} catch (IOException e) {
			
			e.printStackTrace();
		}
	}
	
private ServerInterface ServerContact(String hostName) throws RemoteException{
		
		String registryURL = "rmi://" + hostName + ":" + RMIport + "/server";
		try {
			ServerInterface aServer = (ServerInterface) Naming
					.lookup(registryURL);
			return aServer;
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  catch (NotBoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	
	public void testLeave() throws RemoteException{
		this.leave();
	}
	
	public void testView() throws RemoteException{
		this.view();
	}
	
	public void testAdd() throws RemoteException{
		this.add();
	}
}