
public class DynamicAlgorithm implements Algo {

	StringBuilder commSequance=new StringBuilder();
	public Result execute(String stringA, String stringB) {
		
		return null;
	}

	public int[][] dynmicAlgorithm(String A, String B){
		int[][] table = new int[A.length()][B.length()];
		
		for (int counter=0;counter< A.length();counter++){
			for (int innerCounter=0;innerCounter< B.length();innerCounter++)
			{
				if(innerCounter==0 || counter==0)
				table[counter][innerCounter]=0;
				else if(A.charAt(counter)==B.charAt(innerCounter))
					table[counter][innerCounter]=table[counter-1][innerCounter-1];
				else
					table[counter][innerCounter]=table[counter][innerCounter-1]>table[counter-1][innerCounter]?table[counter][innerCounter-1]:table[counter-1][innerCounter];
			}
		}
			
		return table;
	} 
	
	public Result solution(int[][] table, String A, String B){
		int counter1=A.length()-1;
		int counter2=B.length()-1;
		LCSlenght=table[counter1][counter2];
		while(counter1>0 || counter2>0){
		if(A.charAt(counter1)==B.charAt(counter2)){
			commSequance.append(A.charAt(counter1));
			counter1--;
			counter2--;
		}
		else if(table[counter1-1][counter2]>table[counter1][counter2-1])
			   counter1--;
		else
			 counter2--;
		}
		return new Result(LCSlenght, comSubSeq, timeTaken, numberOfRecursiveCalls, Slength, Rlength)
	}
			
			
	}
	


