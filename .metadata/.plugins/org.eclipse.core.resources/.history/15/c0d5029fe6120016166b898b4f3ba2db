import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Hashtable;


public class Tracker implements TrackerInterface {
HashMap<String , File > fileRecord = new HashMap<String , File >();	
public int addPeer(String IPaddress, String portNumber,String fileName, byte[] peciesAvailabel) throws RemoteException{
	Peer requester =new Peer(IPaddress,portNumber,peciesAvailabel);
	fileRecord.get(fileName).addPeer(requester);
	return requester.getPeerId();
	}
public HashMap<Integer,Peer> getPeers(String fileName) throws RemoteException
{
	return fileRecord.get(fileName).getPeers();
	
}
/**
 * To connect with Client Which asked for File
 * @param hostName
 * @param RMIport
 * @return
 * @throws RemoteException
 */

/**
 * 
 * @param fileName
 * @param peerID
 * @param peiceInfo Send a clone of your piece byte[]
 * @throws RemoteException
 */
public void updatePeerStatus(String fileName,int peerID, byte[] pieceInfo)
		throws RemoteException {
	
	Peer aPeer =fileRecord.get(fileName).getPeerRecord().get(peerID);
	aPeer.setPieceIfno(pieceInfo);
}




public ClientInterfaceForTracker getRemoteClient(String hostName, String RMIport) throws RemoteException{


	String registryURL = "rmi://" + hostName + ":" + RMIport + "/server";
	try {
		ClientInterfaceForTracker aClient = (ClientInterfaceForTracker) Naming
				.lookup(registryURL);
		return aClient;
	} catch (MalformedURLException e) {
		e.printStackTrace();
	} catch (NotBoundException e) {
		e.printStackTrace();
	}
	return null;
}
	
}



