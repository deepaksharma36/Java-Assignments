import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

import org.w3c.dom.css.Counter;



/**
 * This is an implementation of the Ricard and Agrawala Mechanism, 
 *  
 * @author sharma, deepak
 *
 */

public class Process extends UnicastRemoteObject implements ProcessInterface{
	
	
	// maintain log of transactions/requests/events for future use
	
	int processID;
	int processCount;

	volatile boolean processState= true;
	String RMIport;

	
   volatile	boolean election=true;

	Object stateLock = new Object();
	
	Queue<Integer> electionResonse;
	HashMap<String, ProcessInterface> remoteObjectStorage;

	/**
	 * Constructor of process
	 * @param processCount Number of process available 
	 * @param processID Id for process
	 * @param RMIport Port number for communicating with peers
	 * @throws RemoteException
	 */
	Process(int processID,int processCount, String RMIport) throws RemoteException{
	
		this.processID=processID;
		this.processCount=processCount;
		this.RMIport=RMIport;
		remoteObjectStorage = new HashMap<String, ProcessInterface>();
		this.electionResonse = new LinkedList<Integer>();
	}
			
	/**
	 * For accessing  the remote Process this method provide STUB using RMI  
	 * @param hostName Name of the Remote Process
	 * @return Stub of Remote Process
	 * @throws RemoteException
	 */
	private ProcessInterface getProcess(String hostName) throws RemoteException{
		
		if (remoteObjectStorage.containsKey(hostName))
			return remoteObjectStorage.get(hostName);
		String registryURL = "rmi://" + hostName + ":" + RMIport + "/server";
		try {
			ProcessInterface aProcess = (ProcessInterface) Naming
					.lookup(registryURL);
			remoteObjectStorage.put(hostName, aProcess);
			return aProcess;
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}  catch (NotBoundException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	

/**
 * For updating the status of Process: Released Held	
 * @param status
 */
	private  void  updateProcessState(boolean status)
	{
		synchronized(stateLock){
		this.processState=status;}
	}
	/**
	 * This thread seeks/create opportunities for getting Critical Section after Random Time
	 */
	


	public void electionMessage(int requistersID) throws RemoteException {
		if(processState)
		{
			this.getProcess(PROCESS[requistersID-1]).electionResponse(processID);
		}
		initiateElection();
	}

	public void coordinatorMessage(int processID) throws RemoteException {
		
	}

	public void heartBeatChecker() throws RemoteException {
		
		
	}

	public void responseHeartBeat() throws RemoteException {
		
		
	}
    private void initiateElection() throws RemoteException{
    	election=true;
    	for(int counter=processID+1;counter<processCount; counter++)
			this.getProcess(PROCESS[counter-1]).electionMessage(processID);
    	synchronized(timeKeeper){
    		timeKeeper.notify();
    	}
    }

	public void electionResponse(int responserID) throws RemoteException {
		this.electionResonse.add(responserID);
		
	}

	public void criticalSectionSeeker(){
		Thread criticalSectionSeeker = new Thread(new Runnable() {
			Random randomWait = new Random(); 
			public void run() {
				while(true){
				try {
					Thread.sleep(randomWait.nextInt(1)+5000);
					if(processState.equals("RELEASED") && !processorQue.contains(processID) && !csRequests.contains(processID))
						{
						System.out.println("Critical Section request generated by Critical Section Seeker Thread");
						tokenRequest(processID);
						}
					
				} catch (InterruptedException e) {
					e.printStackTrace();
				} catch (RemoteException e) {
					
					e.printStackTrace();
				}
				
			}
				}
		
		});criticalSectionSeeker.start();
	}
	/**
	 * This Thread Resolve CS requests once process receive the token, get notified/activated once it receive the Token 
	 *  
	 */
	
	public void csRequestExecutor(){
		Thread csRequestExecutor = new Thread( new Runnable() {
			public void run() {
				try {
					while(true){
						if(holderID==processID && csRequests.size()>0){
						System.out.println("Now possessing token, Identified by CS request Executor thread");
						
						resolvingCSrequest();
						}}
				} catch (RemoteException e) {
					e.printStackTrace();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});
		csRequestExecutor.start();
	}
}
