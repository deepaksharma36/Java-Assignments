import java.net.*;
import java.io.*;
import java.util.*;
public class GameServer extends Thread {
   ServerSocket aServerSocket;
   int port     = 2200;
   volatile int twoPlayerGameCount=0;
   volatile int fourPlayerGameCount=0;
   Object playerLock2;
   Object playerLock4;
   Connect4Field aConnect4FieldFourPlayer = new Connect4Field();
   Connect4Field aConnect4FieldTwoPlayer = new Connect4Field();
   PlayerInterface[] twoPlayerGame = new PlayerInterface[2];;
   PlayerInterface[] fourPlayerGame = new PlayerInterface[4];;
   //under Construction
   PlayerInterface[] singlePlayerGame = new PlayerInterface[2];
//For defalt port no 4242
   public GameServer()	{
	   try{
	   aServerSocket=new ServerSocket(port);
	   this.playerLock2=new Object();
	   this.playerLock4=new Object();
	   }
	   catch(IOException io){
		   
	   }
   }

   public GameServer(int port)	{
        try { 
            aServerSocket = new ServerSocket(port);
            System.out.println ("Listening on port: " + aServerSocket.getLocalPort());
        } catch(Exception e) {
            System.out.println(e);
        }
   }

    private void printMessage()	{
	System.out.println("-h		---->	help");
	System.out.println(" -port 		port");
	System.out.println(" {-port 		port}");
	System.out.println("or ");
	System.out.println(" no argument");
   }
	
  public  void parseArgs(String args[]) {
	for (int i = 0; i < args.length; i ++) {
	   	if (args[i].equals("-h")) 
			printMessage();
	   	else if (args[i].equals("-port")) {
			port = new Integer(args[++i]).intValue();
			new DayTimeServer(port).start();
		}
	}
   }

  public int getPort() {
	return port;
}

public void setPort(int port) {
	this.port = port;
}

  
   public void run()	{
        try {
        	
            for(;;) {
                Socket aClient = aServerSocket.accept();
                System.out.println("Received Client Request from"+aClient.getLocalPort()+);
                new ClientRequestHandler(aClient,this).start();
                new GameRunner(this).start();
             /*   System.out.println(clnt.toString());
                PrintWriter out = new PrintWriter
                    (clnt.getOutputStream (), true);
                System.out.println("sdcsd");
                out.println("Sending to client");
                BufferedReader din = new BufferedReader (
            			new InputStreamReader (clnt.getInputStream()));
            		String rTime = din.readLine ();
            		System.out.println (rTime);
                clnt.close();*/
            }
        } catch(Exception e) {
            
	    e.printStackTrace();
        }
   }

    public static void main(String args[]) {

		new GameServer().start();

    }

    public int getTwoPlayerGameCount() {
    	synchronized (playerLock2) {
    	return twoPlayerGameCount;
    	}
    }

    public void setTwoPlayerGameCount(int twoPlayerGameCount) {
    	synchronized (playerLock2) {
    		this.twoPlayerGameCount = twoPlayerGameCount;	
		}
    	
    }


       public int getFourPlayerGameCount() {
    	   synchronized (playerLock4) {
    	return fourPlayerGameCount;
    	   }
    }

    public void setFourPlayerGameCount(int fourPlayerGameCount) {
    	synchronized (playerLock4) {
    	this.fourPlayerGameCount = fourPlayerGameCount;
    	}
    }

    int singlePlayerGameCount=0;
       public int getSinglePlayerGameCount() {
    	return singlePlayerGameCount;
    }

    public void setSinglePlayerGameCount(int singlePlayerGameCount) {
    	this.singlePlayerGameCount = singlePlayerGameCount;
    }

    public Connect4Field getaConnect4FieldFourPlayer() {
    	synchronized (playerLock4) {
			
		
    	return aConnect4FieldFourPlayer;
    	}
    }

    public void setaConnect4FieldFourPlayer(Connect4Field aConnect4FieldFourPlayer) {
    	synchronized (playerLock4){
    	this.aConnect4FieldFourPlayer = aConnect4FieldFourPlayer;
    }
    }
    public Connect4Field getaConnect4FieldTwoPlayer() {
    	synchronized (playerLock2){
    	return aConnect4FieldTwoPlayer;
    	}
    }

    public void setaConnect4FieldTwoPlayer(Connect4Field aConnect4FieldTwoPlayer) {
    	synchronized (playerLock2){
    	this.aConnect4FieldTwoPlayer = aConnect4FieldTwoPlayer;
    	}
    }    

       public PlayerInterface[] getTwoPlayerGame() {
    		synchronized (playerLock2){
    	   return twoPlayerGame;
    		}
    }

    public void setTwoPlayerGame(PlayerInterface[] twoPlayerGame) {
    	synchronized (playerLock2){
    	this.twoPlayerGame = twoPlayerGame;
    	}
    }

    public PlayerInterface[] getFourPlayerGame() {
    	synchronized (playerLock4){
    	return fourPlayerGame;
    	}
    }

    public void setFourPlayerGame(PlayerInterface[] fourPlayerGame) {
    	synchronized (playerLock4){
    	this.fourPlayerGame = fourPlayerGame;
    	}
    }

    
    
}