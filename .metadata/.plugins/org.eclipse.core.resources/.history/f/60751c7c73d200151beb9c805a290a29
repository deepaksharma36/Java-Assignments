import java.util.ArrayList;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.TreeSet;

class Edge implements Comparable<Edge>{
	private String startVertex, endVertex;
	private int weight;
	Edge(String startVertex, String endVertex, int weight){
		this.startVertex=startVertex;
		this.endVertex=endVertex;
		this.weight=weight;
	}
public String getStartVertex() {
		return startVertex;
	}
	public void setStartVertex(String startVertex) {
		this.startVertex = startVertex;
	}
	public String getEndVertex() {
		return endVertex;
	}
	public void setEndVertex(String endVertex) {
		this.endVertex = endVertex;
	}
	public int getWeight() {
		return weight;
	}
	public void setWeight(int weight) {
		this.weight = weight;
	}
	@Override
	public int compareTo(Edge edge2) {
		if (this.weight>edge2.getWeight())
		return 1;
		else if(this.weight<edge2.getWeight())
			return -1;
		else
			return 0;
	}
}
class Graph{
    private HashMap<String, ArrayList<Edge>> graph;
	public boolean addEdge(String startVertext,String endVertex, int weight)
	{
		if (graph.containsKey(startVertext)){
		
		graph.get(startVertext).add(new Edge(startVertext, endVertex, weight));
		return true;
		}
		else{
			graph.put(startVertext,new ArrayList<Edge>());
			graph.get(startVertext).add(new Edge(startVertext, endVertex, weight));
		return true;
		}
	}
	
	public ArrayList<Edge> getEdges(String vertex){
	return graph.get(vertex);
	}
	
}


public class Dijkstra {
	Queue<Edge> dijkstraQueue=new PriorityQueue<Edge>();
	Set<String> visited = new TreeSet<String>();
	HashMap<String,String> parent = new HashMap<String,String>();
	public ArrayList<String> FindPath(String startVertex, endVertex){
	while(!dijkstraQueue.isEmpty()){
		for(
	}
	}

}
