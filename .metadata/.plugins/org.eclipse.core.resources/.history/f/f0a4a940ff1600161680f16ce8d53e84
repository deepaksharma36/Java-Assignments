import java.util.HashMap;




public class RecursiveMemoizationTable implements Algo {
	int numberOfRecursiveCall=0;

	int[][] table ;
	//commSequance=new StringBuilder();
	public Result execute(String stringA, String stringB) {
		
		numberOfRecursiveCall=0;
		table = new int[stringA.length()][stringB.length()];
		tempRecord aRecord = new tempRecord(new StringBuilder(), 0);
		long sTime = System.currentTimeMillis();
		int i = stringA.length();
		int j = stringB.length();
		tempRecord output=RecursiveMemoization(stringA, stringB,i,j);
		
		for (int i=0;i<stringA.length();i++)
		{
			for(int j=0;j<stringB.length();j++)
				table[i][j]=-1;
		}
		long stTime = System.currentTimeMillis();
	    long timeTaken = stTime - sTime;
		return new Result(output.length, output.commSubSequance.reverse().toString(), timeTaken, numberOfRecursiveCall-1, stringA.length(), stringB.length()) ;
	}

	
	public int RecursiveMemoization(String A, String B, int i, int j){

	
		if (l1<1 || l2<1)
			return 0;
		else if (table[l1-1][l2-1]>0)
			 return table[l1-1][l2-1];
		numberOfRecursiveCall++;
		
		if(A.charAt(l1-1)==B.charAt(l2-1)){
				table[l1-1][l2-1] = 1+ RecursiveMemoization(A.substring(0,l1-1), B.substring(0,l2-1));
				return table[l1-1][l2-1];
			}
		
			
		else{
					table[l1-1][l2-1]=RecursiveMemoization(A, B.substring(0,l2-1));
					table[l1-1][l2-1]=RecursiveMemoization(A.substring(0,l2-1), B);
		
				} 
	}

class Strings {
	String A;
	String B;
	Strings(String A, String B)
	{
		this.A=A;
		this.B=B;
	}
   public boolean compare(String A, String B){
	   if (this.A.equals(A) && this.B.equals(B))
		   return true;
	   else if (this.A.equals(B) && this.B.equals(A))
		   return true;
	   else 
		   return false;
	   
   }
   @Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + getOuterType().hashCode();
	result = prime * result + ((A == null) ? 0 : A.hashCode());
	result = prime * result + ((B == null) ? 0 : B.hashCode());
	return result;
}
@Override
public boolean equals(Object obj) {
	
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	Strings other = (Strings) obj;
	if (A.equals(other.B) && B.equals(other.A))
		return true;
	if (!getOuterType().equals(other.getOuterType()))
		return false;
	if (A == null) {
		if (other.A != null)
			return false;
	} else if (!A.equals(other.A))
		return false;
	if (B == null) {
		if (other.B != null)
			return false;
	} else if (!B.equals(other.B))
		return false;
	return true;
}
private RecursiveAlgorithmMemoization getOuterType() {
	return RecursiveAlgorithmMemoization.this;
}
   
}

class tempRecord{
	public tempRecord(StringBuilder commSubSequance, int length) {
	
		this.commSubSequance = commSubSequance;
		this.length = length;
	}
	StringBuilder commSubSequance;
	int length;
	
	
}


}