import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.HashMap;

public class Tracker implements TrackerInterface {
	HashMap<String, File> fileRecord = new HashMap<String, File>();

	public synchronized int addPeer(String IPaddress, String portNumber,
			String fileName, byte[] peciesAvailabel) throws RemoteException {
		Peer requester = new Peer(IPaddress, portNumber, peciesAvailabel);
		fileRecord.get(fileName).addPeer(requester);
		return requester.getPeerId();
	}

	public HashMap<Integer, Peer> getPeers(int peerID,String fileName)
			throws RemoteException {
		
		return fileRecord.get(fileName).getPeers();

	}

	/**
	 * We can maintain a que for the purpose of resolving
	 */
	public String updatePeerStatus(String fileName, int peerID, byte[] pieceInfo)
			throws RemoteException {
		if (fileRecord.containsValue(fileName)) {

			Peer aPeer = fileRecord.get(fileName).getPeerRecord().get(peerID);
			if (aPeer != null) {
				aPeer.setPieceInfo(pieceInfo);
				fileRecord.get(fileName).getPeerRecord().put(peerID, aPeer);
				return "Successfully Details updated";
			} else
			{	return "You are not a registered peer for given file";}
		} else {
			return "No Details found for given file";
		}
	}

	/*
	 * public ClientInterfaceForTracker getRemoteClient(String hostName, String
	 * RMIport) throws RemoteException{
	 * 
	 * 
	 * String registryURL = "rmi://" + hostName + ":" + RMIport + "/server"; try
	 * { ClientInterfaceForTracker aClient = (ClientInterfaceForTracker) Naming
	 * .lookup(registryURL); return aClient; } catch (MalformedURLException e) {
	 * e.printStackTrace(); } catch (NotBoundException e) { e.printStackTrace();
	 * } return null; }
	 */
}
