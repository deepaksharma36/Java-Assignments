 class OnceOrMany {
 
         public static boolean singelton(String literal, String aNewString)    {
               System.out.println("literal: "+ literal + "     aNewString: "+aNewString);
        	   return ( literal == aNewString );
         }
         public static void main( String args[] ) {
               String aString = "xyz";
               System.out.println("1.  xyz == aString: " +     "xyz" == aString   );
               //In the above statement compiler is comparing two strings :
               //"1.  xyz == aString: xyz" AND "xyz" as both string are not
               //equal to each other so we got result False.  
               //First string was synthesized because of the concatenation between string 
               //"1.  xyz == aString: " and "xyz". 
               
               System.out.println("2.  xyz == aString: " +   ( "xyz" == aString ) );
               //output for above statement is: "2.  xyz == aString: true" 
               //here before concatenation String "xyz" was compared with aString and both  
               //are equal which returned true. true was concatenated with rest of the String 
               

              String newString = new String("xyz");
              System.out.println("xyz == new String(xyz)\n    " + ("xyz" == newString) );
              //above statement gives output: "xyz == new String(xyz)\n   xyz False as we are 
              //trying to compare a literal with object and this will result false which concatenate 
              //with rest of the string in print statement.
              
              
              System.out.println("1: " + singelton("xyz", "xyz"));
              // above statement gives output true because we are comparing two String literals and 
              //All literals refer to same memory as Java keeps only one copy-- in Strings pool 
              //inside main heap memory (java 1.7 and above) --which are assigned with same value.
              //Thus Boolean operation ==  in singlton method returns True
              
              System.out.println("2: " + singelton("xyz", new String("xyz") ));
              //above statement gives output false because we are comparing String literal with String 
              //object as while creating an string object compiler allocate them new memory on different 
              // location from the memory location of the same valued literals' .
              // Thus Boolean operation ==  in singlton method returns False
              
              System.out.println("3: " + singelton("xyz", "xy" + "z"));
              //above statement gives output true as we are comparing two String Literals with same values 
              // as after concatenation between string "xy" and "z" String "xyz" was passed to
              //the method singlton. 
              //All literals refer to same memory as Java keeps only one copy-- in Strings pool 
              //inside main heap memory (java 1.7 and above) --which are assigned with same value.
              //Thus Boolean operation ==  in singlton method returns True
              
              System.out.println("4: " + singelton("x" + "y" + "z", "xyz"));
              //above statement gives output true as we are comparing two String Literals with same values 
              // as after concatenation between string "x","y" and "z" String "xyz" was passed to
              //the method singlton.All literals refer to same memory as Java keeps only one copy
              //-- in Strings pool inside main heap memory (java 1.7 and above) --which are assigned with same value.
              //Thus Boolean operation ==  in singlton method returns True

              System.out.println("5: " + singelton("x" + "y" + new String("z"), "xyz"));
              //above statement gives output false as memory to the string "z" was allocated during run time
              //so resultant concatenated string "xyz" was created on run time. Now both Strings "xyz" are not 
              // present at same memory location in heap thus Boolean operation ==  in singlton method returns False.
              
              System.out.println("6: " + singelton("x" + ( "y" + "z"), "xyz"));
              //above statement gives output true as we are comparing two String Literals with same values 
              // as after concatenation between string "y" and "z" String "yz" was further concatenated with 
              //String "x" and result "xyz" was passed to the method singlton. j
              //All literals refer to same memory as Java keeps only one copy-- in Strings pool 
              //inside main heap memory (java 1.7 and above) --which are assigned with same value.
              //Thus Boolean operation ==  in singlton method returns True
              
              

              System.out.println("7: " + singelton('x' +  "y" + "z", "xyz"));
              //above statement gives output true as we are comparing String Literals with same values
              // as after concatination between Char 'x' and String "y" String "xy" was created which
              //further concatenated with String "z" and resultant String "xyz" was passed to the 
              //method singlton. Java keeps only one copy-- on a particular location in main heap memory
              //(java 1.7 and above) --for all  the literal which are assigned with same value. 
              //Thus Boolean operation ==  in singlton method returns True 
        }
      }

