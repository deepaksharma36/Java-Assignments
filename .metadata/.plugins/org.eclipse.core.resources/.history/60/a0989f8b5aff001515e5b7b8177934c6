import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;



/**
 * All functionalities: Deposit WithDraw and SendMoney of process has been implemented in this class.
 *  
 * @author sharma, deepak
 *
 */

public class Process extends UnicastRemoteObject implements ProcessInterface, Runnable{
	
	
	volatile private int[] vectorClock;
	volatile int amount=1000;
	
	TransactionsLog log;
	private Queue<Integer> requesters = new LinkedList<Integer>();
	int processID;
	int processCount;
	volatile String processState="RELEASED";
	String RMIport;
	Object clockLock = new Object();
	Object moneyLock = new Object();
	Transaction seekingCS=null;
	HashMap<String, ProcessInterface> remoteObjectStorage;
	HashSet<Integer> okMessage = new HashSet<Integer>();
	Queue<Integer> pendingRequst = new LinkedList<Integer>();
	
	/**
	 * Constructor or process
	 * @param processCount Number of process available 
	 * @param processID Id for process
	 * @param RMIport Port number for communicating with peers
	 * @throws RemoteException
	 */
	Process(int processCount,int processID, String RMIport) throws RemoteException{
	
		this.processID=processID;
		this.processCount=processCount;
		vectorClock = new int[processCount];
		this.log= new TransactionsLog();
		this.RMIport=RMIport;
		remoteObjectStorage = new HashMap<String, ProcessInterface>();
		
	
	}
	public int[] updateClock()
	{
		synchronized(clockLock){
		 this.vectorClock[processID-1]++;
		 return vectorClock;
		}
	}
	
	public  int[] updateClock(int[] vectorClock) throws RemoteException{
		synchronized(clockLock){
		for(int counter=0;counter<processCount;counter++)
		{
			if(this.vectorClock[counter]<vectorClock[counter])
				this.vectorClock[counter]=vectorClock[counter];
		}
		return this.vectorClock;}
	}
	
	public void updateMoney(int amount)
	{
		synchronized(moneyLock)
		{
			this.amount+=amount;
		}
	}
	
	/**
	 * withdrawal method
	 * @param withdrawAmount 
	 * @param message custom message
	 * @return if sufficiant amount is not available than return false
	 */
	public  boolean withdraw(int withdrawAmount , String message){
		if(withdrawAmount<amount){
		synchronized(this){
			updateMoney(-1*withdrawAmount);
			int[] timeStamp=updateClock();
			log.registerEvent
			(new Transaction("withdraw "+message, (timeStamp), withdrawAmount, amount));
		}
		return true;
		}
		System.out.println("Insuficiant Fund");
		return false;
	}


	public boolean deposit(int depositAmount,String message) throws RemoteException{
		synchronized(this){
			updateMoney(depositAmount);
			int[] timeStamp = updateClock();
			log.registerEvent
			(new Transaction("deposit"+message, timeStamp, depositAmount, amount));
		}
		return true;
	}
	/**
	 * this functionality take place to two steps first withdrawal at sender's end
	 * then deposit at receivers end 
	 * @param processID Id of the receiving process
	 * @param amount amount to be transfered
	 * @return
	 */
	public boolean sendMoney(int processID,int amount){
		synchronized(this){
			if(withdraw(amount,"DR for sending "+processID)){
				try {
					//danger zone
					getProcess(PROCESS[processID-1]).updateClock(vectorClock);
				
				if(getProcess(PROCESS[processID-1]).deposit(amount,"CR from "+processID))
					return true;
				} catch (RemoteException e) {
				
					e.printStackTrace();
					return false;
				}}
		}
		return false;
	}
	
	
	private ProcessInterface getProcess(String hostName) throws RemoteException{
		
		if (remoteObjectStorage.containsKey(hostName))
			return remoteObjectStorage.get(hostName);
		String registryURL = "rmi://" + hostName + ":" + RMIport + "/server";
		try {
			ProcessInterface aProcess = (ProcessInterface) Naming
					.lookup(registryURL);
			remoteObjectStorage.put(hostName, aProcess);
			return aProcess;
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}  catch (NotBoundException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * This method execute random transactions for showing the working of the vector clock
	 */
	public void run() {
		try{
		System.out.println("Money Sending Process has started");	
		while(true){	
		Random r = new Random();
		int tAmount=r.nextInt(100)+1;
		int action=r.nextInt(3)+1;
		int processNumber;
		do{
		 processNumber=r.nextInt(processCount)+1;}
		while(processNumber==this.processID);
		Thread.sleep(5000);
		switch (action) {
		case 1:
			System.out.println("\t\t\t\t\tdepositing money "+tAmount);
			deposit(tAmount,"Self CR");
			log.showLast();
			break;
		case 2:
			System.out.println("\t\t\t\tSending money "+tAmount+" to "+processNumber);
			sendMoney(processNumber, tAmount);
			log.showLast();
			break;
		case 3:
			System.out.println("\t\t\t\twithdrawing money "+tAmount);
			withdraw(tAmount,"Self DR");
			log.showLast();
			break;				
		default:
			System.out.println("Invalid Choice");
			break;
		}
		}
		}catch(RemoteException ex){
			ex.printStackTrace();
		}
		catch(InterruptedException ex){
			ex.printStackTrace();
		}
		
	}

	private boolean compareTime(int[] time, int guestProcessID)
	{
		//V = Vc iff V [ j]  = Vc [ j ] for j = 1 ...N
		//V <= Vc iff V > [j]  Vc > j  for j = 1....N
		//V < Vc iff V d Vc  V z Vc
		//This will return true if and only if requester has less time stamp on its message 
		int equaler=0;
		int requesterLeadCount=0;
		for(int counter=0;counter<processCount;counter++){
			if(time[counter]==this.seekingCS.timeStamp[counter])
				equaler++;
			else if(time[counter]>=this.seekingCS.timeStamp[counter])
				requesterLeadCount++;
		}
		if (requesterLeadCount==this.processCount)
			return false;
		if (equaler<this.processCount)
			return true;
		return tiaBreaker( guestProcessID);
	}
	private boolean tiaBreaker(int guestProcessID){
		if (guestProcessID<this.processID)
			return true;
		return false;
	}
	
	public void tokenRequest(int requistersID, int[] time) throws RemoteException {
		//once we received the request we created an transaction then we provided necessary response  
		int[] timeStamp=updateClock(time);
		this.log.registerEvent(new Transaction("Received Request for CS"+requistersID, timeStamp, 0, amount));
		log.showLast();
		// If i dont want I will say ok
		if(processState.equals("RELEASED")){
			
			getProcess(PROCESS[requistersID-1]).reponseTokenRequest(processID,timeStamp);}
		// If i want then I will compare my time with this guy time
		// if he wins i will send Ok else I will put him in que
		else if(processState.equals("WANTED")){
			System.out.println("Received Token in wanted state");
			if(compareTime(time,requistersID))
				getProcess(PROCESS[requistersID-1]).reponseTokenRequest(processID,timeStamp);
			else
				pendingRequst.add(requistersID);
		}
		// because this mate gona call me one day , then I have to check
		// if I am using It, i will put your request in my que
		else{
			pendingRequst.add(requistersID);
		}
 

	}
    // Reponse for token request
	public void reponseTokenRequest(int processID,int[] respondertime) throws RemoteException {
		int[] timeStamp=updateClock(respondertime);
		log.registerEvent(new Transaction("Received Ok from "+ processID, timeStamp, 0, amount));
		System.out.println("Received Ok from"+processID);
		okMessage.add(processID);
		System.out.println("Total Oks"+okMessage.size());
		//create an transection
		//if(okMessage.size()==this.processCount-1)
			//Notify someone who is pooping //dont worry
		
		
	}
	private void critcalSection()
	{
		// I will have some good time here
		// I will update my status after waiting for sometime
		// then I will check my que,if some poor guy looking for token 
		//I will send token to him
		System.out.println("Inside Critical Section");
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	private void closingTask() throws RemoteException
	{
		//current thread is done with CS
		//It will check que and respond to them
		int[] timeNow=vectorClock;
		for( int requester : pendingRequst)
			getProcess(PROCESS[requester-1]).reponseTokenRequest(processID,timeNow);
		//it will clean csSeeking transection object
		this.seekingCS=null;
		//clean ok messages
		this.okMessage.clear();
		//it will change it status
		updateThreadState("RELEASED");
		System.out.println("Released the Critical Section");
	}
	private void lookingForCriticalSection() throws RemoteException
	{   //create an event
		int[] timeStamp=updateClock();
		seekingCS = new Transaction("Seeking CS",(timeStamp),0,amount);
		log.registerEvent(seekingCS);
		log.showLast();
		//compare the time with top requester in que Should I?? Not Applicable 
		//my que for sure empty thats why I was free YUP
		for(int counter=0;counter<processCount;counter++)
		{if(counter!=this.processID-1)
			getProcess(PROCESS[counter]).tokenRequest(processID, seekingCS.timeStamp);
		}
		// anyway I will request other guys and keep an eye on responses 
		//should I do it myself or i need a slave thread ?? no idea man
		//get Inserted in que
		// When i will get other response I am gona checkout the
		//critical section yuppppppppppppp
		// but who gona take me in critical section I am making a thread for the same  
	}
	private synchronized void  updateThreadState(String status)
	{
		this.processState=status;
	}
	/**
	 * This thread will govern the events of accessing Critical Section
	 */
	
	public void criticalSectionSeeker(){
		Thread criticalSectionSeeker = new Thread(new Runnable() {
			Random randomWait = new Random(); 
			public void run() {
				while(true){
				try {
					Thread.sleep(randomWait.nextInt(50000));
					if(processState.equals("RELEASED") && seekingCS==null)
						{updateThreadState("WANTED");
						lookingForCriticalSection();}
					
				} catch (InterruptedException e) {
					e.printStackTrace();
				} catch (RemoteException e) {
					
					e.printStackTrace();
				}
				
			}
				}
		
		});criticalSectionSeeker.start();
	}
	
	public void criticalSectionExecutor(){
		Thread criticalSectionExecutor = new Thread( new Runnable() {
			
			public void run() {
			while(true)
			{
				if(processState.equals("WANTED") && okMessage.size()==processCount-1)
				{
					System.out.println("All requirments Done!! ready to go Critical section");
					updateThreadState("HOLD");
				   	critcalSection();
				   	try {
						closingTask();
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				   
				}
			}
				
			}
		});
		
		criticalSectionExecutor.start();
	}
}
