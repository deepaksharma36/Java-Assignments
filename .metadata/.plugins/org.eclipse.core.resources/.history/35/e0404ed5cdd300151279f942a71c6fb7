import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;
class Vertex {
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((Vertex == null) ? 0 : Vertex.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Vertex other = (Vertex) obj;
		if (Vertex == null) {
			if (other.Vertex != null)
				return false;
		} else if (!Vertex.equals(other.Vertex))
			return false;
		return true;
	}
	String Vertex;
	int Distance;
	Vertex(String Vertex, int Distance)
	{
		this.Vertex=Vertex;
		this.Distance=Distance;
	}
	
	public String toString()
	{
		return Vertex + " " + Distance;
	}
}
class Edge implements Comparable<Edge>{
	private Vertex startVertex, endVertex;
	private int weight;
	Edge(Vertex startVertex, Vertex endVertex, int weight){
		this.startVertex=startVertex;
		this.endVertex=endVertex;
		this.weight=weight;
	}
	public Vertex getStartVertex() {
		return startVertex;
	}
	
	public Vertex getEndVertex() {
		return endVertex;
	}
	
	public int getWeight() {
		return weight;
	}
	public void setWeight(int weight) {
		this.weight = weight;
	}
	@Override
	public int compareTo(Edge edge2) {
		if (this.weight+this.startVertex.Distance>edge2.getWeight()+edge2.startVertex.Distance)
		return 1;
		else if(this.weight+this.startVertex.Distance<edge2.getWeight()+edge2.startVertex.Distance)
			return -1;
		else
			return 0;
	}
}
class Graph{
    private HashMap<Vertex, ArrayList<Edge>> graph;// = new HashMap<String, ArrayList<Edge>>;
    Graph()
    {
    	graph = new HashMap<Vertex, ArrayList<Edge>>();
    }
	public boolean addEdge(Vertex startVertext,Vertex endVertex, int weight)
	{
		if (graph.containsKey(startVertext)){
		
		graph.get(startVertext).add(new Edge(startVertext, endVertex, weight));
		return true;
		}
		else{
			graph.put(startVertext,new ArrayList<Edge>());
			graph.get(startVertext).add(new Edge(startVertext, endVertex, weight));
		return true;
		}
	}
	
	public ArrayList<Edge> getEdges(Vertex startVertex){
		if (graph.containsKey(startVertex))
			return graph.get(startVertex);
		else
			return null;
	}
	
}

class Path {
	Vertex via;
	int distance;
	Path(Vertex via,int distance)
	{
		this.distance=distance;
		this.via=via;
	}
	public int compareTo(int o) {
		if (this.distance>o)
			return 1;
		else if (this.distance<o)
			return -1;
		else 
			return 0;
	}
	
	public String toString(){
		return via + " " +distance;
	}
}

public class Dijkstra {
	Queue<Edge> dijkstraQueue=new PriorityQueue<Edge>();
	
	HashMap<Vertex,Path> path = new HashMap<Vertex,Path>();
	private ArrayList<Path> getPath(HashMap<Vertex,Path> path,Vertex endVertex)
	{
		ArrayList<Path> sortestPath = new ArrayList<Path>();
		do
		{
			sortestPath.add(path.get(endVertex));
			if (path.containsKey(endVertex))
				endVertex=path.get(endVertex).via;
			else
				break;
				//System.out.println("Breaking");
		}while(endVertex!=null);
		return sortestPath;
	}
	public ArrayList<Path> FindPath(Vertex startVertex,Vertex endVertex, Graph graph){
		Set<Vertex> visited = new HashSet();
		Edge current;
		
		visited.add(startVertex);
		startVertex.Distance=0;
		for(Edge edge: graph.getEdges(startVertex)) 
				dijkstraQueue.add(edge);
		path.put(startVertex, new Path(null,0));
		while(!dijkstraQueue.isEmpty()){
			current = dijkstraQueue.poll();
			 if (!visited.contains(current.getEndVertex()))
				{current.getEndVertex().Distance=current.getStartVertex().Distance+current.getWeight();				
				 path.put(current.getEndVertex(), new Path(current.getStartVertex(),current.getStartVertex().Distance+current.getWeight()));}
			 					
			 
			else if(current.getEndVertex().Distance>current.getStartVertex().Distance+current.getWeight())
				{
				current.getEndVertex().Distance=current.getStartVertex().Distance+current.getWeight();
				path.put(current.getEndVertex(), new Path(current.getStartVertex(),current.getStartVertex().Distance+current.getWeight()));
				
				}
			
			if (!visited.contains(current.getEndVertex())){
				visited.add(current.getEndVertex());
				if(graph.getEdges(current.getEndVertex())!=null)
					{for(Edge edge: graph.getEdges(current.getEndVertex()))
						dijkstraQueue.add(edge);}
			}
		
		}
		return getPath(path, endVertex);
	}
	public Graph createGraph(Graph graph){
		File file = new File("/home/deepak/Dropbox/Java_Assignment/Interview/src/error.txt");
		String input;
		String[] edge;
		try{
			Scanner sc = new Scanner(file);
			while(sc.hasNextLine()){
				input=sc.nextLine();
				edge=input.split(",");
				graph.addEdge(new Vertex(edge[0], 1000),new Vertex(edge[1], 1000),Integer.parseInt(edge[2]));
				graph.addEdge(new Vertex(edge[1], 1000),new Vertex(edge[0], 1000),Integer.parseInt(edge[2]));
			}
		}
		catch(Exception e){
			
			System.out.println(e.getStackTrace());
		
		}
		return graph;
		
	}
	public static void main(String[] args)
	{
	    Graph graph = new Graph();
	    Dijkstra aDijkstra = new Dijkstra();
	    graph=aDijkstra.createGraph(graph);
	    ArrayList<Path> spath = aDijkstra.FindPath(new Vertex("3455",0), new Vertex("3435",1000),graph );
	    for (Path p:spath){
	    	System.out.println(p);
	    }
	}
}