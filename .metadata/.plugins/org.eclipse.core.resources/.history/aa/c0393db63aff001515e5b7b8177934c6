import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;



/**
 * All functionalities: Deposit WithDraw and SendMoney of process has been implemented in this class.
 *  
 * @author sharma, deepak
 *
 */

public class Process extends UnicastRemoteObject implements ProcessInterface, Runnable{
	
	
	volatile private int[] vectorClock;
	volatile int amount=1000;
	
	TransactionsLog log;
	private Queue<Integer> requesters = new LinkedList<Integer>();
	int processID;
	int processCount;
	volatile String processState="RELEASED";
	String RMIport;
	Object clockLock = new Object();
	Object moneyLock = new Object();
	
	/**
	 * Constructor or process
	 * @param processCount Number of process available 
	 * @param processID Id for process
	 * @param RMIport Port number for communicating with peers
	 * @throws RemoteException
	 */
	Process(int processCount,int processID, String RMIport) throws RemoteException{
	
		this.processID=processID;
		this.processCount=processCount;
		vectorClock = new int[processCount];
		this.log= new TransactionsLog();
		this.RMIport=RMIport;
		
	
	}
	public void updateClock()
	{
		synchronized(clockLock){
		this.vectorClock[processID-1]++;
		}
	}
	
	public  void updateClock(int[] vectorClock) throws RemoteException{
		synchronized(clockLock){
		for(int counter=0;counter<processCount;counter++)
		{
			if(this.vectorClock[counter]<vectorClock[counter])
				this.vectorClock[counter]=vectorClock[counter];
		}}
	}
	
	public void updateMoney(int amount)
	{
		synchronized(moneyLock)
		{
			this.amount+=amount;
		}
	}
	
	/**
	 * withdrawal method
	 * @param withdrawAmount 
	 * @param message custom message
	 * @return if sufficiant amount is not available than return false
	 */
	public  boolean withdraw(int withdrawAmount , String message){
		if(withdrawAmount<amount){
		synchronized(this){
			amount-=withdrawAmount;
			updateClock();
			log.registerEvent
			(new Transaction("withdraw "+message, Arrays.toString(vectorClock), withdrawAmount, amount));
		}
		return true;
		}
		System.out.println("Insuficiant Fund");
		return false;
	}


	public boolean deposit(int depositAmount,String message) throws RemoteException{
		synchronized(this){
			amount+=depositAmount;
			updateClock();
			log.registerEvent
			(new Transaction("deposit"+message, Arrays.toString(vectorClock), depositAmount, amount));
		}
		return true;
	}
	/**
	 * this functionality take place to two steps first withdrawal at sender's end
	 * then deposit at receivers end 
	 * @param processID Id of the receiving process
	 * @param amount amount to be transfered
	 * @return
	 */
	public boolean sendMoney(int processID,int amount){
		synchronized(this){
			if(withdraw(amount,"DR for sending "+processID)){
				try {
					getProcess(PROCESS[processID-1]).updateClock(vectorClock);
				
				if(getProcess(PROCESS[processID-1]).deposit(amount,"CR from "+processID))
					return true;
				} catch (RemoteException e) {
				
					e.printStackTrace();
					return false;
				}}
		}
		return false;
	}
	
	
	private ProcessInterface getProcess(String hostName) throws RemoteException{
		
		String registryURL = "rmi://" + hostName + ":" + RMIport + "/server";
		try {
			ProcessInterface aProcess = (ProcessInterface) Naming
					.lookup(registryURL);
			return aProcess;
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  catch (NotBoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * This method execute random transactions for showing the working of the vector clock
	 */
	public void run() {
		try{
		System.out.println("Process has started");	
		while(true){	
		Random r = new Random();
		int tAmount=r.nextInt(100)+1;
		int action=r.nextInt(3)+1;
		int processNumber;
		do{
		 processNumber=r.nextInt(processCount)+1;}
		while(processNumber==this.processID);
		Thread.sleep(5000);
		switch (action) {
		case 1:
			System.out.println("\t\t\t\t\tdepositing money "+tAmount);
			deposit(tAmount,"Self CR");
			log.show();
			break;
		case 2:
			System.out.println("\t\t\t\tSending money "+tAmount+" to "+processNumber);
			sendMoney(processNumber, tAmount);
			log.show();
			break;
		case 3:
			System.out.println("\t\t\t\twithdrawing money "+tAmount);
			withdraw(tAmount,"Self DR");
			log.show();
			break;				
		default:
			System.out.println("Invalid Choice");
			break;
		}
		}
		}catch(RemoteException ex){
			ex.printStackTrace();
		}
		catch(InterruptedException ex){
			ex.printStackTrace();
		}
		
	}

	public void tokenRequest(int requistersID) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	public void reponseTokenRequest() throws RemoteException {
		// 3 cases
		// If i dont want I will say ok
		// If i want then I will compare my time with this guy time
		// if he wins i will send Ok and I will put myself in que
		// else I will put myself in my que?? really ?? huuun yup
		// because this mate gona call me one day , then I have to check
		// my ass.. COOL
		// if I am using It, i will put your request in my que
		
	}
	private void critcalSection()
	{
		// I will have some good time here
		// I will update my status after waiting for sometime
		// then I will check my que,if some poor guy looking for token 
		//I will send token to him
	}
	private void lookingForCriticalSection()
	{   //create an event
		vectorClock[processID-1]++;
		log.registerEvent
		(new Transaction("withdraw "+message, Arrays.toString(vectorClock), withdrawAmount, amount));
		Transaction seekingCS = new Transaction("Seeking CS",);
		//compare the time with top requester in que Should I?? 
		//my que for sure empty thats why I was free
		// anyway I will request other guys and keep an eyes on responses 
		//should I do it myself or i need a slave thread ?? no idea man
		//get Inserted in que
		// When i will get other response I am gona checkout the
		//critical section yuppppppppppppp
		// but who gona take me in critical section  
	}
	private synchronized void  updateThreadState(String status)
	{
		this.processState=status;
	}
	/**
	 * This thread will govern the events of accessing Critical Section
	 */
	
	public void criticalSectionExecuter(){
		Thread criticalSectionExecuter = new Thread(new Runnable() {
			Random randomWait = new Random(); 
			public void run() {
				try {
					Thread.sleep(randomWait.nextInt(5000));
					if(processState.equals("RELEASED"))
						{updateThreadState("WANTED");
						lookingForCriticalSection();}
					
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
			}
		
		});criticalSectionExecuter.start();
	}
}
